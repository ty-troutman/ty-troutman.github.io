---
title: "Saving bar charts from a nested list"
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Sometimes it is useful to generate individual bar chart files (or other plots) instead of a facet plot. For this case I use a function to intersect a character list of genes of interest (GOI) with HOMER RNA-seq TPM data. Data is grouped via specified variable(s) and summary statistics are calculated. Data is then grouped by GOI and nested into a list. Finally, bar plots are iterated with purrr::map2() per GOI using calculated summary statistics.

This function can be downloaded [here](%22https://drive.google.com/file/d/14pVjzlYbI1PIC4XpTBkT8JZTlvfdvwkF/view?usp=sharing%22).

```{r}
suppressMessages(library(tidyverse))
source("../../Code/nestedBarCharts.R")
nestedBarCharts
```

We will use data from from table S2 in [Seidman et. al. Immunity. Volume 52, Issue 6, 16 June 2020, Pages 1057-1074.e7](https://pubmed.ncbi.nlm.nih.gov/32362324/) again to demonstrate usage of the function. It can be downloaded [here](https://ars.els-cdn.com/content/image/1-s2.0-S107476132030159X-mmc3.xlsx).

```{R, message = FALSE}
seidman_etal <-
  read_csv("../Data/Source/rnaSeq_tableS2_seidman_immunity_2020.csv",
           col_types = cols()) 
seidman_etal %>% select(1:6, 13:16) %>% colnames
```

The *nestedBarCharts* function intersects the gene name from the "Annotation/Divergence" column with a user generated list of genes of interest. The function also requires replicate data with two grouping variables. Each data column should be named with in order with a primary grouping variable, a secondary grouping variable, and a replicate ID. Each of these variables should be separated by an `_`. As an example:

**primaryGroup_secondaryGroup_replicate1**

With this in mind, tidy up the data and rename the columns. Then generate a list of genes of interest.

```{R}
tpmData <-
  seidman_etal %>%
  separate(
    col = "Annotation/Divergence",
    into = "Annotation/Divergence",
    sep = "\\|",
    remove = TRUE,
    extra = "drop"
  ) %>%
  select(2:6, 13:16) %>%
  rename(
    "KC_Healthy_rep1" = 2,
    "KC_Healthy_rep2" = 3,
    "KC_NASH_rep1" = 4,
    "KC_NASH_rep2" = 5,
    "Monocyte_Healthy_rep1" = 6,
    "Monocyte_Healthy_rep2" = 7,
    "Monocyte_NASH_rep1" = 8,
    "Monocyte_NASH_rep2" = 9
  )

goi <- c("Ccr2", "Atf3", "Trem2", "Cx3cr1")
```

Function usage: summary data and ggplot data are added to a user delcared variable, which I call output here. It can then be printed to an individual file per GOI as described below:

```{r}
output <-
  tpmData %>%
  nestedBarCharts(
    geneList = "geneList",
    variable1 = "variable1",
    variable2 = "variable2",
    replicateID = "replicateID",
    pointSize = 12,
    lineWidth = 1
  )
output
print(output$data[1])
print(output$plot[1])
```

The resulting list of ggplots can then be written to images of your specification. First, generate a list of file names corresponding to each row.

```{R}
plotnames <-
  map(output$Gene, ~ paste0("../Data/Plots/nestedbarchart_", .x, ".png")) %>%
  flatten()
plotnames
```

Then write the plots to the disk using the file name list in 'plotnames' created above, and the ggplot object list in output\$plot. We can do this in an iterative fashion using purrr::map2 or purrr::walk2.

```{R}
walk2(plotnames,
      output$plot,
      ~ ggsave(
        filename = .x,
        plot = .y,
        height = 7,
        width = 7
      ))

# map_chr(
#   unlist(plotnames), ~ list.files(pattern = .x)
# )
```

Credit: <https://aosmith.rbind.io/2018/08/20/automating-exploratory-plots/> Credit: <https://www.painblogr.org/2020-06-19-purring-through-exploratory-analyses.html>

## Finished!

```{R}
sessioninfo::session_info(pkgs = NULL) %>% details::details(summary = 'Current session info', open = TRUE)
```

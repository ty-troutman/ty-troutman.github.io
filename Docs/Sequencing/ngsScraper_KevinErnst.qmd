---
title: "NGS scraper / downloader"
editor: visual
---

**Author:** Kevin Ernst, Weirauch lab

**Contact:** kevin.ernst -at- cchmc.org

**License:** MIT

This script prompts for login credentials to the CCHMC DNA Sequencing and Genotyping Core's "[customer portal](https://dna.cchmc.org/www/main.php)" and then generates a series of command-line invocations of `curl`, setting an appropriate cookie to authenticate you with the site, which you can then

-   redirect to a file
-   optionally modify (to exclude certain data types)
-   and execute later
-   or even pipe directly into `bash` if you're brave

in order to download *all* NGS data that is available on the site under your login.

The included setup.py will install the script as `ngsdl`.

## Requirements

-   Python ≥3.5
-   [Requests](http://docs.python-requests.org/en/latest/)
-   [lxml](http://lxml.de/)

## Installation

### Quick Start

This procedure requires you have pip [installed](https://pip.pypa.io/en/stable/installing/). *If you are using Linux, your distro may already provide [a package](https://pkgs.org/download/python-pip).*

``` bash
# if you are on the HPC cluster, you will need to load a python/3.x module
module load python3

# install the latest release from GitLab using pip
pip install --user https://tfinternal.research.cchmc.org/gitlab/databank/seq-core-ngs-downloader/-/archive/master/seq-core-ngs-downloader-master.zip

# make sure it works; otherwise, see the 'Updating Your PATH' section below
ngsdl --help

# …or try this as a backup
python -m cchmc_seq_core --help
```

Older versions of pip may require you to download the and manually extract the .zip file from GitLab first, like this:

``` bash
curl -LOJ https://tf.cchmc.org/s/e1f9a
unzip seq-core-ngs-downloader*.zip && rm -f seq-core-ngs-downloader*.zip
cd seq-core-ngs-downloader*
pip install --user .

# optionally delete the downloaded source code
cd .. && rm -rf seq-core-ngs-downloader*
```

#### Updating Your `PATH`

If you install with `pip install --user`, that precludes the need for a virtual environment (see below), but necessitates that you manually add `~/.local/bin` to your `PATH` if you want to be able to run this script from an arbitrary directory:

``` bash
# recommended place for PATH modifications is ~/.profile or ~/.bash_profile
test -f ~/.bash_profile && \
  echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bash_profile || \
  echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.profile

# you will need to log out and back in to see the changes
```

Some Linux distros do this by default now.

On a Mac, pip installs things to your (hidden) `~/Library` folder. You will need to add `$HOME/Library/Python/<python_maj.minor_version>/bin` to your `$PATH` when using the system default Python, where `<python_maj.minor_version>` would be something like "2.7", depending on which version of the OS you have.

### Setup for Local Development

If you are just experimenting, and don't want to mess with setting your `$PATH` or potentially needing `sudo` to install, here's a sure bet:

``` bash
GITLAB=https://tfwebdev.research.cchmc.org/gitlab
git clone $GITLAB/databank/seq-core-ngs-downloader
cd seq-core-ngs-downloader

virtualenv venv      # or, possibly: python3 -m venv venv
. venv/bin/activate  # activate the virtual environment
pip install -e .     # install using the 'setup.py' in the local directory

ngsdl --help         # make sure it works in the virtualenv
```

This repository includes a setuptools [`setup.py`](https://pythonhosted.org/an_example_pypi_project/setuptools.html#using-setup-py), which you can run in the usual way, if that's your thing: `python setup.py [--help | install]`.

## Basic Usage

``` bash
# pretty failsafe; works because of cchmc_seq_core/__main__.py
python -m cchmc_seq_core --help

# redirect 'curl' commands into a script that you can run later
python -m cchmc_seq_core > download.sh
chmod a+x download.sh

# or, if you've installed it properly and set up your $PATH
ngsdl > download.sh
```

The script will prompt you for your CCHMC credentials (which are not stored anywhere). These prompts and any other script output goes to stderr, so you can safely redirect the rest of the output to a file or pipe through `grep`, and so on.

```{=html}
<!--
(This option was disabled due to the DNA Core server not supporting byte
range requests)

**By default, all the invocations of `curl` will be run with the `-C`
(_a.k.a._ `--continue-at`) option**, which causes it to attempt to resume
partial / failed downloads. If you wish to avoid this behavior, maybe to
force a re-download of all existing datasets, pass the `-nr` / `--no-resume`
option to the Python script.
-->
```
You can suppress `curl`'s progress meters on all the download tasks with the `-s` / `--silent` option.

You can limit the types of files that would be downloaded (say, just download `.bam` files) with the `-t` / `--data-type` option, which may be specified more than once, like so:

``` bash
ngsdl -t bam -t bai > download.sh
```

See the output of `ngsdl --help` for all the details.

## Other Tips

There is no option (yet) to leave the "ignored" file types out of the output shell script entirely; that is, file types that you did not explicitly ask for with the `-t` / `--data-type` option.

If you use the `-t` option, the file types you didn't explicitly ask for are just commented out, because the code was simpler that way. The default if you leave it off is to get *all* file types.

If this bothers you, the following small `sed` script will clean up some of the noise, while still preserving the experiment "headings":

``` bash
ngsdl -t fastq | sed '/^# /d; /^## --/d; /^$/d'
```

### Getting data files for a specific sequencing run

Try something like this:

``` bash
ngsdl | grep run0529 > download.sh

# or, pipe it to a shell to start the downloads directly
ngsdl | grep run0529 | bash
```

## References

1.  [CCHMC DNA Sequencing and Genotyping Core](http://centerlink.cchmc.org/research/research---tabs/dna-sequencing-core) - on CenterLink
